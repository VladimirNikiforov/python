#!/usr/bin/python
def displayPathtoPrincess(n, grid):
    m = [(i, grid[i].index('m')) for i in range(len(grid)) if 'm' in grid[i]][0]
    p = [(i, grid[i].index('p')) for i in range(len(grid)) if 'p' in grid[i]][0]
    print(*(['DOWN' for i in range(m[0], p[0])] + ['UP' for i in range(p[0], m[0])] + ['RIGHT' for i in
                                                                                       range(m[1], p[1])] + ['LEFT' for
                                                                                                             i in
                                                                                                             range(p[1],
                                                                                                                   m[
                                                                                                                       1])]),
          sep='\n')


m = int(input())
grid = []
for i in range(0, m):
    grid.append(input().strip())

displayPathtoPrincess(m, grid)


###########################
def nextMove(n, r, c, grid):
    p = [(i, grid[i].index('p')) for i in range(len(grid)) if 'p' in grid[i]][0]
    return ((['DOWN' for i in range(r, p[0])] + ['UP' for i in range(p[0], r)] + ['RIGHT' for i in range(c, p[1])] + [
        'LEFT' for i in range(p[1], c)])[0])


n = int(input())
r, c = [int(i) for i in input().strip().split()]
grid = []
for i in range(0, n):
    grid.append(input())

print(nextMove(n, r, c, grid))

###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
###########################


###########################
